doctype html
html
  head
    title Logging to web application
  body
    p Web Logging

script(async, defer, src="https://apis.google.com/js/api.js" onload="this.onload=handleClientLoad()" onreadystatechange="if (this.readyState === 'complete') this.onload()")

script.
  const apiKey = '#{api_key}';
  const clientId = '#{client_id}';
  //const scopes = 'https://www.googleapis.com/auth/plus.me';
  //const discoveryDocs = ["https://people.googleapis.com/$discovery/rest?version=v1"];
  const scope = '#{scope}';
  const discoveryDocs = ["#{discovery_docs}"];

  function handleClientLoad() {
    //gapi.load('client', initClient);
    gapi.load('client:auth2', initClient);
  }

  function initClient() {
    gapi.client.init({
        apiKey: apiKey,
        discoveryDocs: discoveryDocs,
        clientId: clientId,
        scope: scope
        // The ux_mode/redirect_uri are used for the redirect feature
        //ux_mode: 'redirect',
        //redirect_uri: 'https://d5-docker-dba01.openstack.jp.sbibits.com:8088/test.html'
    }).then(function () {
      // Listen for sign-in state changes.
      gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);
      console.log("Print the auth instance <%s>",  gapi.auth2.getAuthInstance() );
      // Handle the initial sign-in state.
      updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
    });
  }

  function updateSigninStatus(isSignedIn) {
    if (isSignedIn) {
      makeApiCall();
    } else {
      gapi.auth2.getAuthInstance().signIn();
    }
  }

  // Load the API and make an API call.  Display the results on the screen.
  function makeApiCall() {
    //console.log(gapi.auth2.getAuthInstance().currentUser.get());
    document.cookie = "idtoken=" + gapi.client.getToken().id_token + ";path=/";

    console.log(gapi.client.getToken());
    let jwtUsr =  gapi.client.getToken().id_token.split(".");
    console.log(jwtUsr);
    console.log(JSON.parse(atob(jwtUsr[1]) ));
    location.reload();
  }
